CREATE TABLE IF NOT EXISTS films (
	film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar(100) NOT NULL,
	description varchar(200) NOT NULL,
	release_date DATE,
	duration INTEGER,
	mpa_id INTEGER,
	CONSTRAINT positive_duration CHECK (duration > 0),
	CONSTRAINT not_empty_name CHECK ((REPLACE(name, ' ', '')) <> '')
	--CONSTRAINT correct_id_for_age_limit CHECK (age_limit_id BETWEEN 1 AND 5)
	);

CREATE TABLE IF NOT EXISTS users(
	user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	login varchar(100) NOT NULL,
	name varchar(100) NOT NULL,
	email varchar(100)  NOT NULL,
	birthday DATE NOT NULL,
--CONSTRAINT correct_birthday CHECK ()
	CONSTRAINT correct_email CHECK (email LIKE '%_@_%.%')
	);

CREATE TABLE IF NOT EXISTS genre_name(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) NOT NULL
    );

CREATE TABLE IF NOT EXISTS genres (
	genre_id varchar(100) NOT NULL,
	film_id INTEGER REFERENCES films(film_id),
	CONSTRAINT unique_value_genres UNIQUE (genre_id, film_id)
	);

CREATE TABLE IF NOT EXISTS like_list (
	film_id INTEGER REFERENCES films(film_id),
	user_id INTEGER REFERENCES users(user_id),
	CONSTRAINT unique_value_like_list UNIQUE  (film_id, user_id)
	);

CREATE TABLE IF NOT EXISTS friend_list (
	user_id INTEGER REFERENCES users(user_id),
	friend_id INTEGER REFERENCES users(user_id),
	CONSTRAINT uniqie_duo UNIQUE (user_id, friend_id),
	CONSTRAINT not_selffriend CHECK (user_id != friend_id)
	);



CREATE TABLE IF NOT EXISTS requests_friend_list (
	sender_id INTEGER REFERENCES users(user_id),
	recipient_id INTEGER REFERENCES users(user_id),
	CONSTRAINT not_selfi CHECK (sender_id != recipient_id)
	);